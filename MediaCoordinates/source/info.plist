<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.vitorgalvao.alfred.mediacoordinates</string>
	<key>connections</key>
	<dict>
		<key>4B6F8EAF-EEB4-4F5B-B631-0EE4E6423E1A</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>B4C31897-81BA-427A-94FC-5311B89CD053</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>B4C31897-81BA-427A-94FC-5311B89CD053</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>45AED7D1-4A8E-4C6F-BD35-2046EBE169B8</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Vítor Galvão</string>
	<key>description</key>
	<string>Open media GPS coordinates in a map</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>MediaCoordinates</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string># THESE VARIABLES MUST BE SET. SEE THE ONEUPDATER README FOR AN EXPLANATION OF EACH.
readonly remote_info_plist="https://raw.githubusercontent.com/vitorgalvao/alfred-workflows/master/${alfred_workflow_name}/source/info.plist"
readonly workflow_url="https://raw.githubusercontent.com/vitorgalvao/alfred-workflows/master/${alfred_workflow_name}/${alfred_workflow_name}.alfredworkflow"
readonly download_type='direct'
readonly frequency_check='4'

# FROM HERE ON, CODE SHOULD BE LEFT UNTOUCHED!
function abort {
  echo "${1}" &gt;&amp;2
  exit 1
}

function url_exists {
  curl --silent --location --output /dev/null --fail --range 0-0 "${1}"
}

function notification {
  local -r notificator="$(find . -type d -name 'Notificator.app')"
  if [[ -n "${notificator}" ]]; then
    "${notificator}/Contents/Resources/Scripts/notificator" --message "${1}" --title "${alfred_workflow_name}" --subtitle 'A new version is available'
    return
  fi

  local -r terminal_notifier="$(find . -type f -name 'terminal-notifier')"
  if [[ -n "${terminal_notifier}" ]]; then
    "${terminal_notifier}" -title "${alfred_workflow_name}" -subtitle 'A new version is available' -message "${1}"
    return
  fi

  osascript -e "display notification \"${1}\" with title \"${alfred_workflow_name}\" subtitle \"A new version is available\""
}

# Local sanity checks
readonly local_info_plist='info.plist'
readonly local_version="$(/usr/libexec/PlistBuddy -c 'print version' "${local_info_plist}")"

[[ -n "${local_version}" ]] || abort 'You need to set a workflow version in the configuration sheet.'
[[ "${download_type}" =~ ^(direct|page|github_release)$ ]] || abort "'download_type' (${download_type}) needs to be one of 'direct', 'page', or 'github_release'."
[[ "${frequency_check}" =~ ^[0-9]+$ ]] || abort "'frequency_check' (${frequency_check}) needs to be a number."

# Check for updates
if [[ $(find "${local_info_plist}" -mtime +"${frequency_check}"d) ]]; then
  if ! url_exists "${remote_info_plist}"; then abort "'remote_info_plist' (${remote_info_plist}) appears to not be reachable."; fi # Remote sanity check

  readonly tmp_file="$(mktemp)"
  curl --silent --location --output "${tmp_file}" "${remote_info_plist}"
  readonly remote_version="$(/usr/libexec/PlistBuddy -c 'print version' "${tmp_file}")"

  if [[ "${local_version}" == "${remote_version}" ]]; then
    touch "${local_info_plist}" # Reset timer by touching local file
    exit 0
  fi

  if [[ "${download_type}" == 'page' ]]; then
    notification 'Opening download page…'
    open "${workflow_url}"
    exit 0
  fi

  download_url="$([[ "${download_type}" == 'github_release' ]] &amp;&amp; curl --silent "https://api.github.com/repos/${workflow_url}/releases/latest" | grep 'browser_download_url' | head -1 | sed -E 's/.*browser_download_url": "(.*)"/\1/' || echo "${workflow_url}")"

  if url_exists "${download_url}"; then
    notification 'Downloading and installing…'
    curl --silent --location --output "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow" "${download_url}"
    open "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow"
  else
    abort "'workflow_url' (${download_url}) appears to not be reachable."
  fi
fi</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>45AED7D1-4A8E-4C6F-BD35-2046EBE169B8</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>PATH="$(./_sharedresources 'exiftool')"

function notification {
  /bin/zsh ./Notificator.app/Contents/Resources/Scripts/notificator --message "${1}" --title "${alfred_workflow_name}"
}

file="${1}"

[[ "${map_provider}" == 'Google' ]] &amp;&amp; map_url='https://www.google.com/maps?q=' || map_url='http://maps.apple.com/?q='

coordinates="$(exiftool -printFormat '$gpslatitude, $gpslongitude' --printConv "${file}")"

if [[ -z "${coordinates}" ]]; then
  afplay /System/Library/Sounds/Funk.aiff
  notification 'Could not find GPS information'
else
  open "${map_url}${coordinates}"
fi</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>B4C31897-81BA-427A-94FC-5311B89CD053</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>acceptsmulti</key>
				<false/>
				<key>filetypes</key>
				<array>
					<string>+public.audiovisual-content</string>
					<string>+public.image</string>
				</array>
				<key>name</key>
				<string>Coordinates in map</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.action</string>
			<key>uid</key>
			<string>4B6F8EAF-EEB4-4F5B-B631-0EE4E6423E1A</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>Use the `Coordinates in map` File Action to open in the maps provider of your choice the location where the chosen media was recorded.

![](https://i.imgur.com/iSqH99u.png)

The `map_provider` Workflow Environment Variable defaults to `Apple`, but also supports `Google`.</string>
	<key>uidata</key>
	<dict>
		<key>45AED7D1-4A8E-4C6F-BD35-2046EBE169B8</key>
		<dict>
			<key>colorindex</key>
			<integer>12</integer>
			<key>note</key>
			<string>OneUpdater</string>
			<key>xpos</key>
			<integer>430</integer>
			<key>ypos</key>
			<integer>30</integer>
		</dict>
		<key>4B6F8EAF-EEB4-4F5B-B631-0EE4E6423E1A</key>
		<dict>
			<key>xpos</key>
			<integer>40</integer>
			<key>ypos</key>
			<integer>30</integer>
		</dict>
		<key>B4C31897-81BA-427A-94FC-5311B89CD053</key>
		<dict>
			<key>xpos</key>
			<integer>230</integer>
			<key>ypos</key>
			<integer>30</integer>
		</dict>
	</dict>
	<key>variables</key>
	<dict>
		<key>map_provider</key>
		<string>Apple</string>
	</dict>
	<key>variablesdontexport</key>
	<array/>
	<key>version</key>
	<string>21.5</string>
	<key>webaddress</key>
	<string>https://vitorgalvao.com/</string>
</dict>
</plist>

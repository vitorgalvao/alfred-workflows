#!/usr/bin/env ruby

require 'json'
require 'open-uri'
require 'pathname'

cube_dir = ARGV[0]
cube_cards_json = ARGV[1]
all_cards_json = ARGV[2]

[cube_cards_json, all_cards_json].each do |path|
  Pathname(path).dirname.mkpath unless Pathname(path).dirname.exist?
end

# Download card data
all_cards_info = JSON.parse(URI.open('https://archive.scryfall.com/json/scryfall-oracle-cards.json').read)

# card is the card data taken from the upstream JSON
# count is the number of copies in cube
# card_list is the array to add to
def push_card(card, count, card_list)
  return if card['layout'] =~ /(token|double_faced_token)/

  card = card['card_faces'][0] if card['layout'] == 'transform' # If card is doube-faced, use info of first face

  list =
    if card['mana_cost'].empty? && card['type_line'] =~ /.*Land.*/
      'Lands'
    elsif card['colors'].empty?
      'Colorless'
    elsif card['colors'].length > 1
      'Multi'
    elsif card['colors'].first == 'W'
      'White'
    elsif card['colors'].first == 'U'
      'Blue'
    elsif card['colors'].first == 'B'
      'Black'
    elsif card['colors'].first == 'R'
      'Red'
    elsif card['colors'].first == 'G'
      'Green'
    end

  # If there is more than one copy, include the number in the title
  title = count.eql?('1') ? card['name'] : "#{card['name']} (#{count})"

  pt = card['power'].nil? ? '' : " êÑÅ #{card['power']}/#{card['toughness']}"
  rulings = card['oracle_text'].nil? || card['oracle_text'].empty? ? '' : " êÑÅ #{card['oracle_text'].gsub("\n", '. ')}"
  image_size = ENV['image_size'] =~ /(png|large|normal|small)/ ? ENV['image_size'] : 'png'
  image = card['image_uris'][image_size]

  card_list.push(
    title: title,
    autocomplete: card['name'],
    subtitle: "#{card['mana_cost']} (#{card['cmc'].to_i}) êÑÅ #{card['type_line']}#{pt} êÑÅ #{card['rarity']}#{rulings}",
    quicklookurl: image,
    icon: { path: 'symbols/' + list + '.png' },
    arg: list + '|' + count + '|' + card['name']
  )
end

# Build the JSONs
# Upstream cards
all_cards = []

all_cards_info.each do |card|
  push_card(card, '1', all_cards)
end

# Cube cards
cube_cards = []

Pathname(cube_dir)
  .children
  .select { |path| path.to_path.end_with?('.txt') }
  .reject { |path| path.basename.to_path.start_with?('_') } # Files starting with underscores are special and should not be included
  .each do |txt|
    File.read(txt)
        .split("\n")
        .each do |line|
          parts = line.split(' ')
          count = parts[0]
          name = parts[1..-1].join(' ')

          card = all_cards_info.detect { |card| card['name'] == name }
          push_card(card, count, cube_cards)
        end
  end

# Save JSONs
File.write(cube_cards_json, { items: cube_cards }.to_json)
File.write(all_cards_json, { items: all_cards }.to_json)
